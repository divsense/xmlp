export tagLine, attrLine, attrKey, attrKeyContainer, attrKeyValue

import 'mart::divsense/rio/parser'

tagStart = '.'
attrStart = '@'

ident = some(re(/[a-zA-Z0-9:-]/)) >>= pure . join('')

quotStr = c -> char(c) >>= a -> some(noneof(c)) >>= x -> char(c) >>= b -> pure([a] ++ x ++ [b])

singleQuotStr = quotStr("'")
doubleQuotStr = quotStr('"')

attrValue = (singleQuotStr <|> doubleQuotStr) >>= pure . join('')

keyOnly = ident >>= x -> pure([{token: 'attr-name', value: x}])
keyValue = ident >>= x -> char("=") >> attrValue >>= v -> pure([
            {token: 'attr-name', value: x},
            {token: 'punctuation', value: '='},
            {token: 'attr-value', value: v}])

kvo = keyValue <|> keyOnly

attr = space >>= xs -> kvo >>= ys -> pure([{token: 'punctuation', value: join('',xs)}] ++ ys)

elem = char(tagStart) >> ident >>= id -> pure([
        {token: 'punctuation', value: tagStart},
        {token:'tag', value: id}
        ])

elemWithAttrs = elem >>= t -> some(attr) >>= xs -> pure(t ++ flatten(xs))

kcont = char(attrStart) >> ident >>= x -> eof() >> pure([{token: 'punctuation', value: attrStart}, {token: 'attr-name', value: x}])

kv = some(attr) >>= xs -> pure(flatten(xs))

akv = keyValue >>= xs -> many(attr) >>= ys -> pure(xs ++ ys)

atl = char(attrStart) >> kv >>= xs -> pure([{token: 'punctuation', value: attrStart}] ++ xs)

tgl = elemWithAttrs <|> elem

parse = p -> unless(isNil, head) . prop('parse', p)

tagLine = parse(tgl)
attrLine = parse(atl)
attrKey = parse(keyOnly)
attrKeyContainer = parse(kcont)
attrKeyValue = parse(akv)

